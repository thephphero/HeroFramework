<?php
/**
 * The Hero Framework.
 *
 * (c) Celso Luiz de F. Fernandes  <celso@thephphero.com>
 * Date: 28/10/17
 * Time: 19:28
 * Created by thePHPHero
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Bundles\FrameworkBundle\Console;


use Symfony\Component\Console\Application as ConsoleApplication;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;
class Application extends ConsoleApplication{

    private $kernel;
    private $commandsRegistered = false;

    public function __construct(HttpKernelInterface $kernel,$name = 'HeroFramework', $version = 'UNKNOWN')
    {
        $this->kernel=$kernel;


        parent::__construct($name, Kernel::VERSION.' - '.$kernel->getName().'/'.$kernel->getEnvironment().($kernel->isDebug() ? '/debug' : ''));

        $this->getDefinition()->addOption(new InputOption('--env', '-e', InputOption::VALUE_REQUIRED, 'The Environment name.', $kernel->getEnvironment()));


    }

    public function getKernel()
    {
        return $this->kernel;
    }


    public function find($name)
    {
        $this->registerCommands();
        return parent::find($name);
    }

    public function all($namespace = null)
    {
        $this->registerCommands();
        return parent::all($namespace); // TODO: Change the autogenerated stub
    }

    public function doRun(InputInterface $input, OutputInterface $output)
    {
        $this->kernel->boot();
        $container = $this->kernel->getContainer();
        foreach ($this->all() as $command) {
            if ($command instanceof ContainerAwareInterface) {
                $command->setContainer($container);
            }
        }
        $this->setDispatcher($container->get('event_dispatcher'));

        return parent::doRun($input, $output);
    }

    public function get($name)
    {
        $this->registerCommands();
        return parent::get($name);
    }


    public function add(Command $command)
    {
        $this->registerCommands();
        return parent::add($command);
    }

    protected function registerCommands()
    {
        if ($this->commandsRegistered) {
            return;
        }
        $this->commandsRegistered = true;
        $this->kernel->boot();
        $container = $this->kernel->getContainer();

        $file =$container->getParameter('kernel.root_dir').'/config/commands.yml';

        try {
            $commands = Yaml::parse(file_get_contents($file));

            if ($commands) {

                foreach ($commands['commands'] as $command) {
                    if($command['enabled']){
                        $this->add(new $command['class']());
                    }

                }
            }
        } catch (ParseException $e) {
            printf("Unable to parse the YAML string: %s", $e->getMessage());
        }


    }
}
