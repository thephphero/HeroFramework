<?php

/**
 * The Hero Framework.
 *
 * (c) Celso Luiz de F. Fernandes  <celso@thephphero.com>
 * Date: 29/07/17
 * Time: 09:12
 * Created by thePHPHero
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Bundles\SecurityBundle\Security\Authenticators;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Guard\Authenticator\AbstractFormLoginAuthenticator;
use Symfony\Component\Security\Http\Authentication\SimpleFormAuthenticatorInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class FormAuthenticator extends AbstractFormLoginAuthenticator {

    protected $passwordEncoder;

    /**
     * FormAuthenticator constructor.
     * @param UserPasswordEncoderInterface $passwordEncoder
     */
    public function __construct(UserPasswordEncoderInterface $passwordEncoder)
    {
        $this->passwordEncoder = $passwordEncoder;
    }

    /**
     * @param UserInterface $user
     * @param string $providerKey
     * @return \Symfony\Component\Security\Guard\Token\PostAuthenticationGuardToken
     */
    public function createAuthenticatedToken(UserInterface $user, $providerKey)
    {
        return parent::createAuthenticatedToken($user, $providerKey); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return array|void
     */
    public function getCredentials(Request $request)
    {

        if ($request->getPathInfo() != '/login' || !$request->isMethod('POST')) {
            return;
        }

        $username = $request->request->get('_username');

        $password = $request->request->get('_password');
        return array(
            'username' => $username,
            'password' => $password
        );
    }

    /**
     * @param mixed $credentials
     * @param UserInterface $user
     * @return bool
     */
    public function checkCredentials($credentials, UserInterface $user)
    {
        $plainPassword = $credentials['password'];

        // check credentials - e.g. make sure the password is valid
        // return true to cause authentication success


        $result= $this->passwordEncoder->isPasswordValid(
            $user,
            $plainPassword,
            $user->getSalt()
        );


        return $result;
    }

    public function start(Request $request, AuthenticationException $authException = null)
    {
        return parent::start($request, $authException); // TODO: Change the autogenerated stub
    }

    public function getUser($credentials, UserProviderInterface $userProvider)
    {
        $username = $credentials['username'];
        return $userProvider->loadUserByUsername($username);
    }

    public function supportsRememberMe()
    {
        return parent::supportsRememberMe(); // TODO: Change the autogenerated stub
    }

    public function getDefaultSuccessRedirectUrl()
    {
        // on success, let the request continue
        return RedirectResponse::create('common/welcome');
    }

    public function getLoginUrl()
    {
        // TODO: Implement getLoginUrl() method.
    }

    /**
     * @return UserPasswordEncoderInterface
     */
    public function getPasswordEncoder()
    {
        return $this->passwordEncoder;
    }

    /**
     * @param UserPasswordEncoderInterface $passwordEncoder
     */
    public function setPasswordEncoder($passwordEncoder)
    {
        $this->passwordEncoder = $passwordEncoder;
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
    {
        return parent::onAuthenticationFailure($request, $exception); // TODO: Change the autogenerated stub
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
    {
        return parent::onAuthenticationSuccess($request, $token, $providerKey); // TODO: Change the autogenerated stub
    }



}