<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'event_dispatcher' shared service.

$this->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

$instance->addListener('kernel.view', array(0 => function () {
    return ${($_ = isset($this->services['listener.view_response']) ? $this->services['listener.view_response'] : $this->services['listener.view_response'] = new \Bundles\FrameworkBundle\Response\Listeners\ViewResponseListener()) && false ?: '_'};
}, 1 => 'onKernelView'), 0);
$instance->addListener('kernel.request', array(0 => function () {
    return ${($_ = isset($this->services['locale.local_listener']) ? $this->services['locale.local_listener'] : $this->services['locale.local_listener'] = new \Bundles\FrameworkBundle\Locale\LocaleListener()) && false ?: '_'};
}, 1 => 'onKernelRequest'), 0);
$instance->addListener('kernel.request', array(0 => function () {
    return ${($_ = isset($this->services['listener.router']) ? $this->services['listener.router'] : $this->load('getListener_RouterService.php')) && false ?: '_'};
}, 1 => 'onKernelRequest'), 32);
$instance->addListener('kernel.finish_request', array(0 => function () {
    return ${($_ = isset($this->services['listener.router']) ? $this->services['listener.router'] : $this->load('getListener_RouterService.php')) && false ?: '_'};
}, 1 => 'onKernelFinishRequest'), 0);
$instance->addListener('kernel.exception', array(0 => function () {
    return ${($_ = isset($this->services['listener.router']) ? $this->services['listener.router'] : $this->load('getListener_RouterService.php')) && false ?: '_'};
}, 1 => 'onKernelException'), -64);
$instance->addListener('kernel.request', array(0 => function () {
    return ${($_ = isset($this->services['listener.middleware']) ? $this->services['listener.middleware'] : $this->services['listener.middleware'] = new \Bundles\FrameworkBundle\Routing\Listeners\MiddlewareListener($this)) && false ?: '_'};
}, 1 => 'onKernelRequest'), 34);
$instance->addListener('kernel.response', array(0 => function () {
    return ${($_ = isset($this->services['listener.middleware']) ? $this->services['listener.middleware'] : $this->services['listener.middleware'] = new \Bundles\FrameworkBundle\Routing\Listeners\MiddlewareListener($this)) && false ?: '_'};
}, 1 => 'onKernelResponse'), 128);
$instance->addListener('kernel.response', array(0 => function () {
    return ${($_ = isset($this->services['response.listener']) ? $this->services['response.listener'] : $this->services['response.listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8')) && false ?: '_'};
}, 1 => 'onKernelResponse'), 0);
$instance->addListener('kernel.request', array(0 => function () {
    return ${($_ = isset($this->services['session.session_listener']) ? $this->services['session.session_listener'] : $this->services['session.session_listener'] = new \Bundles\FrameworkBundle\Session\SessionListener($this)) && false ?: '_'};
}, 1 => 'onKernelRequest'), 128);
$instance->addListener('kernel.response', array(0 => function () {
    return ${($_ = isset($this->services['session.session_listener']) ? $this->services['session.session_listener'] : $this->services['session.session_listener'] = new \Bundles\FrameworkBundle\Session\SessionListener($this)) && false ?: '_'};
}, 1 => 'onKernelResponse'), -1000);
$instance->addListener('kernel.finish_request', array(0 => function () {
    return ${($_ = isset($this->services['session.session_listener']) ? $this->services['session.session_listener'] : $this->services['session.session_listener'] = new \Bundles\FrameworkBundle\Session\SessionListener($this)) && false ?: '_'};
}, 1 => 'onFinishRequest'), 0);
$instance->addListener('kernel.response', array(0 => function () {
    return ${($_ = isset($this->services['session.save_session_listener']) ? $this->services['session.save_session_listener'] : $this->services['session.save_session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener()) && false ?: '_'};
}, 1 => 'onKernelResponse'), -1000);

return $instance;
